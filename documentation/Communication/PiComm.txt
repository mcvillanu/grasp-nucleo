-------------------- AUTHOR --------------------
    By:         Raunak Bhagat
    Date:       Jan. 29, 2020
    Purpose:    An API class providing easy access to read, parse, and write information to and from the Pi.


-------------------- INTRODUCTION --------------------
    There are a few different types of ways chars/strings can be represented in this situation:
        1) A null-terminated array of chars
        2) A std::string
        3) The Arduino Framework's String
    The RapidJSON library uses 1) and the Arduino Framework uses 3).
    This can be kind of confusing, so there are "conversion" functions declared in the Utils.h class which will allow you to convert one type into any of the other two.
    However, while interfacing with this class, one will notice that std::string is always preferred. This was chosen mainly because std::string is part of the Standard C++ Library.
    Also, std::string probably contains less overhead than the Arduino Framework's String (emphasis on probably...), and I think it will be easier to use and adapt to.

    TODO:
        1)  Implement object functionality (i.e. adding objects to, removing objects from, replacing existing values with new objects, and reading objects from JSONs).
        2)  Implement array functionality (i.e. adding arrays to, removing arrays from, replacing existing values with new arrays, and reading arrays from JSONs).


-------------------- FIELDS --------------------
    Serial Active:
        Is triggered to "true" as soon as the communication to the Pi is established.
        Prevents Setup from being called over and over again, which flushes the Serial Buffer (which may cause errors in reading somewhere else).


-------------------- METHODS --------------------
    COMMUNICATION:
        Empty default constructor. This technically needs to exist...

    IS SERIAL ACTIVE:
        Returns the value of Communications::serialActive.

    SETUP:
        Initializes the this->BAUDRATE to COMMUNICATION::META::BAUDRATE and then flushes the Serial buffer if and ONLY IF Communication::serialActive is false.
        Otherwise, it returns without doing anything.
        Prevents the serial initialization process from being called over and over again and tampering with any messages.

    CREATE NEW JSON:
        Creates a new JSON Document object.
        Use this method in order to create an empty JSON that can be populated with key-value pairs.

    STRINGIFY DOCUMENT TO JSON:
        Takes a JSON Document pointer and turns it into a (formatted) std::string which is returned to the caller.

    ADD STRING:
        Takes in a JSON Document pointer, a key, and a value (the latter two of which are both of type std::string).
        The passed in key-value pair will be added to the JSON Document if and ONLY IF the key does NOT already exist in it.
        Note:
            If the key already exists, the function will return WITHOUT DOING ANYTHING (NO CHANGES TO THE EXISTING JSON DOCUMENT WILL BE MADE). This is a specific design decision just so the previous key will not be overidden.
            Key resetting can be done through another API which will be implemented soon.

    ADD BOOL:
        Takes in a JSON Document point, a key, and a value (where the key is a std::string and the value is a boolean).
        The passed in key-value pair will be added to the JSON Document if and ONLY IF the key does NOT already exist in it.
        Note:
            If the key already exists, the function will return WITHOUT DOING ANYTHING (NO CHANGES TO THE EXISTING JSON DOCUMENT WILL BE MADE). This is a specific design decision just so the previous key will not be overidden.
            Key resetting can be done through another API which will be implemented soon.

    ADD INT:
        Takes in a JSON Document pointer, a key, and a value (where the key is a std::string and the value is an int).
        The passed in key-value pair will be added to the JSON Document if and ONLY IF the key does NOT already exist in it.
        Note:
            If the key already exists, the function will return WITHOUT DOING ANYTHING (NO CHANGES TO THE EXISTING JSON DOCUMENT WILL BE MADE). This is a specific design decision just so the previous key will not be overidden.
            Key resetting can be done through another API which will be implemented soon.

    ADD DOUBLE:
        Takes in a JSON Document pointer, a key, and a value (where the key is a std::string and the value is a double).
        The passed in key-value pair will be added to the JSON Document if and ONLY IF the key does NOT already exist in it.
        Note:
            If the key already exists, the function will return WITHOUT DOING ANYTHING (NO CHANGES TO THE EXISTING JSON DOCUMENT WILL BE MADE). This is a specific design decision just so the previous key will not be overidden.
            Key resetting can be done through another API which will be implemented soon.

    REMOVE KEY PAIR:
        Takes in a JSON Document pointer and a std::string key which to search the JSON against. If the key is found in the JSON, the key-pair value is entirely removed.
        If the JSON Document pointer is null or if the key does not exist in the JSON, then the function returns WITHOUT DOING ANYTHING.

    REPLACE WITH STRING:
        Receives a JSON Document pointer, a std::string key, and a std::string value. JSON Document is searched through with the key.
        If the key is found in the JSON Document, the key-value pair is DELETED and then the NEW key-value pair (with the new key being the same) is inserted.
        Note:
            The implementation of this API first DELETES the key-pair and then reinserts the new key-pair (with the new key being the same as the old key).
            An important feature of this API is that the old value does not necessarily need to be of the same type as the new value.
            i.e.    Old JSON with the original value being a bool:              { "key" : true }
                    replaceWithString(<json pointer>, "key", "newValue");
                    New JSON with the new value being a std::string:            { "key" : "newValue" }

    REPLACE WITH BOOL:
        Receives a JSON Document pointer, a std::string key, and a bool value. JSON Document is searched through with the key.
        If the key is found in the JSON Document, the key-value pair is DELETED and then the NEW key-value pair (with the new key being the same) is inserted.
        Note:
            The implementation of this API first DELETES the key-pair and then reinserts the new key-pair (with the new key being the same as the old key).
            An important feature of this API is that the old value does not necessarily need to be of the same type as the new value.
            i.e.    Old JSON with the original value being an int:              { "key" : 24 }
                    replaceWithString(<json pointer>, "key", "newValue");
                    New JSON with the new value being a bool:                   { "key" : true }

    REPLACE WITH INT:
        Receives a JSON Document pointer, a std::string key, and a bool value. JSON Document is searched through with the key.
        If the key is found in the JSON Document, the key-value pair is DELETED and then the NEW key-value pair (with the new key being the same) is inserted.
        Note:
            The implementation of this API first DELETES the key-pair and then reinserts the new key-pair (with the new key being the same as the old key).
            An important feature of this API is that the old value does not necessarily need to be of the same type as the new value.
            i.e.    Old JSON with the original value being a double:            { "key" : 24.8 }
                    replaceWithString(<json pointer>, "key", "newValue");
                    New JSON with the new value being an int:                   { "key" : 24 }

    REPLACE WITH DOUBLE:
        Receives a JSON Document pointer, a std::string key, and a bool value. JSON Document is searched through with the key.
        If the key is found in the JSON Document, the key-value pair is DELETED and then the NEW key-value pair (with the new key being the same) is inserted.
        Note:
            The implementation of this API first DELETES the key-pair and then reinserts the new key-pair (with the new key being the same as the old key).
            An important feature of this API is that the old value does not necessarily need to be of the same type as the new value.
            i.e.    Old JSON with the original value being a std::string:       { "key" : "newValue" }
                    replaceWithString(<json pointer>, "key", "newValue");
                    New JSON with the new value being an double:                { "key" : 24.8 }

    GET TYPE:
        Takes in a JSON Document pointer and a std::string key to search the Document against.
        Returns an enumeration based upon the type of the key's value. Look through the JSON_TYPES enum in <constants.h> for all the codes.

    READ RAW MESSAGE:
        Reads the raw JSON string incoming from the Serial Bridge. Breaks off when the COMMUNICATION::END_TAG ("\n") tag is encountered. Returns a std::string.

    PARSE MESSAGE INTO DOCUMENT:
        Reads the raw message from the Serial Bridge and converts that into an array of chars.
        The array of chars is then passed into a new rapidjson::Document pointer, which then converts that into a JSON Document pointer.
        The JSON document pointer is then returned.

    READ VALUE FROM MESSAGE:
        Receives a JSON Document pointer to search through and a std::string which is the key the JSON is searched against.
        If the key is found, it is returned as a (void *)! Before using the return value, you will have to cast it to the proper type, which will require you to know/calculate the type beforehand.
        If the key does not exist in the JSON, a nullptr is returned! Check for a nullptr before using!

    READ STRING FROM MESSAGE:
        Receives a JSON Document pointer to search through and a std::string which is the key the JSON is searched against.
        If the key is found and if the value is a std::string, it is returned as a (std::string *)! No casting will have to be done in order to use the return value.
        If the key does not exist in the JSON OR if the key does exist but its value is not a std::string, a nullptr is returned! Check for a nullptr before using!

    READ BOOL FROM MESSAGE:
        Receives a JSON Document pointer to search through and a std::string which is the key the JSON is searched against.
        If the key is found and if the value is a bool, it is returned as a (bool *)! No casting will have to be done in order to use the return value.
        If the key does not exist in the JSON OR if the key does exist but its value is not a bool, a nullptr is returned! Check for a nullptr before using!

    READ INT FROM MESSAGE:
        Receives a JSON Document pointer to search through and a std::string which is the key the JSON is searched against.
        If the key is found and if the value is an int, it is returned as a (int *)! No casting will have to be done in order to use the return value.
        If the key does not exist in the JSON OR if the key does exist but its value is not an int, a nullptr is returned! Check for a nullptr before using!

    READ DOUBLE FROM MESSAGE:
        Receives a JSON Document pointer to search through and a std::string which is the key the JSON is searched against.
        If the key is found and if the value is a double, it is returned as a (double *)! No casting will have to be done in order to use the return value.
        If the key does not exist in the JSON OR if the key does exist but its value is not a double, a nullptr is returned! Check for a nullptr before using!

    WRITE RAW MESSAGE:
        Takes in a std::string and writes it to the Serial bridge.